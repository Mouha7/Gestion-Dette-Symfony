security:
    # Configuration des hashers de mot de passe
    password_hashers:
        App\Entity\User:
            algorithm: 'auto'
    
    # Configuration des providers d'utilisateurs
    providers:
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    
    # Configuration des pare-feux
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        
        login:
            pattern: ^/api/login
            stateless: true
            json_login:
                check_path: /api/login_check
                username_path: email
                password_path: password
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure

        api:
            pattern: ^/api
            stateless: true
            jwt: ~
    
    # Contrôle d'accès
    access_control:
        - { path: ^/api/login, roles: PUBLIC_ACCESS }
        
        # Routes admin (accès total)
        - { path: ^/api/user, roles: ROLE_ADMIN }
        
        # Routes boutiquier
        - { path: ^/api/boutiquier, roles: [ROLE_BOUTIQUIER, ROLE_ADMIN] }
        
        # Routes client
        - { path: ^/api/client, roles: [ROLE_CLIENT, ROLE_BOUTIQUIER, ROLE_ADMIN] }
        
        # Toutes les autres routes API nécessitent une authentification
        - { path: ^/api, roles: IS_AUTHENTICATED_FULLY }

    # Hiérarchie des rôles 
    role_hierarchy:
        ROLE_BOUTIQUIER: [ROLE_CLIENT]
        ROLE_ADMIN: [ROLE_BOUTIQUIER, ROLE_CLIENT]